//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
// 
#pragma warning disable 1591

namespace SalesManager.Control.ExchangeRateService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ExchangeRateWebServiceSoap", Namespace="http://webxml.com.cn/")]
    public partial class ExchangeRateWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getSupportCurrencyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSupportCurrencyStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback getExchangeRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getExchangeRateProOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ExchangeRateWebService() {
            this.Url = global::SalesManager.Control.Properties.Settings.Default.SalesManager_Control_ExchangeRateService_ExchangeRateWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getSupportCurrencyCompletedEventHandler getSupportCurrencyCompleted;
        
        /// <remarks/>
        public event getSupportCurrencyStringCompletedEventHandler getSupportCurrencyStringCompleted;
        
        /// <remarks/>
        public event getExchangeRateCompletedEventHandler getExchangeRateCompleted;
        
        /// <remarks/>
        public event getExchangeRateProCompletedEventHandler getExchangeRateProCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webxml.com.cn/getSupportCurrency", RequestNamespace="http://webxml.com.cn/", ResponseNamespace="http://webxml.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getSupportCurrency() {
            object[] results = this.Invoke("getSupportCurrency", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getSupportCurrencyAsync() {
            this.getSupportCurrencyAsync(null);
        }
        
        /// <remarks/>
        public void getSupportCurrencyAsync(object userState) {
            if ((this.getSupportCurrencyOperationCompleted == null)) {
                this.getSupportCurrencyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSupportCurrencyOperationCompleted);
            }
            this.InvokeAsync("getSupportCurrency", new object[0], this.getSupportCurrencyOperationCompleted, userState);
        }
        
        private void OngetSupportCurrencyOperationCompleted(object arg) {
            if ((this.getSupportCurrencyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSupportCurrencyCompleted(this, new getSupportCurrencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webxml.com.cn/getSupportCurrencyString", RequestNamespace="http://webxml.com.cn/", ResponseNamespace="http://webxml.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] getSupportCurrencyString() {
            object[] results = this.Invoke("getSupportCurrencyString", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getSupportCurrencyStringAsync() {
            this.getSupportCurrencyStringAsync(null);
        }
        
        /// <remarks/>
        public void getSupportCurrencyStringAsync(object userState) {
            if ((this.getSupportCurrencyStringOperationCompleted == null)) {
                this.getSupportCurrencyStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSupportCurrencyStringOperationCompleted);
            }
            this.InvokeAsync("getSupportCurrencyString", new object[0], this.getSupportCurrencyStringOperationCompleted, userState);
        }
        
        private void OngetSupportCurrencyStringOperationCompleted(object arg) {
            if ((this.getSupportCurrencyStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSupportCurrencyStringCompleted(this, new getSupportCurrencyStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webxml.com.cn/getExchangeRate", RequestNamespace="http://webxml.com.cn/", ResponseNamespace="http://webxml.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getExchangeRate(string theType) {
            object[] results = this.Invoke("getExchangeRate", new object[] {
                        theType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getExchangeRateAsync(string theType) {
            this.getExchangeRateAsync(theType, null);
        }
        
        /// <remarks/>
        public void getExchangeRateAsync(string theType, object userState) {
            if ((this.getExchangeRateOperationCompleted == null)) {
                this.getExchangeRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetExchangeRateOperationCompleted);
            }
            this.InvokeAsync("getExchangeRate", new object[] {
                        theType}, this.getExchangeRateOperationCompleted, userState);
        }
        
        private void OngetExchangeRateOperationCompleted(object arg) {
            if ((this.getExchangeRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getExchangeRateCompleted(this, new getExchangeRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webxml.com.cn/getExchangeRatePro", RequestNamespace="http://webxml.com.cn/", ResponseNamespace="http://webxml.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getExchangeRatePro(string theType, string theUserID) {
            object[] results = this.Invoke("getExchangeRatePro", new object[] {
                        theType,
                        theUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getExchangeRateProAsync(string theType, string theUserID) {
            this.getExchangeRateProAsync(theType, theUserID, null);
        }
        
        /// <remarks/>
        public void getExchangeRateProAsync(string theType, string theUserID, object userState) {
            if ((this.getExchangeRateProOperationCompleted == null)) {
                this.getExchangeRateProOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetExchangeRateProOperationCompleted);
            }
            this.InvokeAsync("getExchangeRatePro", new object[] {
                        theType,
                        theUserID}, this.getExchangeRateProOperationCompleted, userState);
        }
        
        private void OngetExchangeRateProOperationCompleted(object arg) {
            if ((this.getExchangeRateProCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getExchangeRateProCompleted(this, new getExchangeRateProCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSupportCurrencyCompletedEventHandler(object sender, getSupportCurrencyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSupportCurrencyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSupportCurrencyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSupportCurrencyStringCompletedEventHandler(object sender, getSupportCurrencyStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSupportCurrencyStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSupportCurrencyStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getExchangeRateCompletedEventHandler(object sender, getExchangeRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getExchangeRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getExchangeRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getExchangeRateProCompletedEventHandler(object sender, getExchangeRateProCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getExchangeRateProCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getExchangeRateProCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591